"""to_svg"""
from skimage import io, color, img_as_ubyte
from skimage.filters import threshold_otsu, gaussian
from skimage import measure
import numpy as np

# The original code was generated by chat_gpt, and isn't particularly
# elegant or "pythonic".


def convert_image_to_svg(image_path: str, output_path: str, smoothing_sigma: float = 2.0) -> None:
    """
    Converts an image to an SVG format with contour tracing and Gaussian smoothing.

    Parameters:
    image_path (str): Path to the input image.
    output_path (str): Path for the output SVG file.
    smoothing_sigma (float, optional): Sigma value for Gaussian smoothing. Default is 2.0.
    """

    # Load the image
    image = io.imread(image_path)

    # Check if the image has an alpha channel (4th channel)
    if image.shape[-1] == 4:
        # Convert the image from RGBA to RGB
        image = color.rgba2rgb(image)

    # Convert to grayscale and then apply Gaussian smoothing
    grayscale = color.rgb2gray(image)
    smoothed = gaussian(grayscale, sigma=smoothing_sigma)
    # Normalize the smoothed image to be in the range [0, 1]
    smoothed = (smoothed - smoothed.min()) / (smoothed.max() - smoothed.min())

    smoothed = img_as_ubyte(smoothed)  # Convert the image to 8-bit grayscale

    # Convert to binary using Otsu's method
    thresh = threshold_otsu(smoothed)
    binary = smoothed > thresh

    # Find contours
    contours = measure.find_contours(binary, 0.8)

    # Create an SVG file
    # Original chatgpt code omitted viewBox
    svg_output = (
        "<svg xmlns='http://www.w3.org/2000/svg' width='1024' height='1024'"
        " viewBox='0 0 1024 1024'"
        ">\n"
    )
    for contour in contours:
        svg_output += "<path d='M"
        for i, coord in enumerate(contour):
            x, y = np.flip(coord)  # Flip coordinates for correct SVG orientation
            svg_output += f"{x},{y} "
            if i == 0:
                svg_output += "L"
        svg_output += "Z' fill='black'/>\n"
    svg_output += "\n</svg>"

    # Save the SVG file
    with open(output_path, "w", encoding="UTF-8") as file:
        file.write(svg_output)


# Example usage

convert_image_to_svg("simple-panda.png", "simple-panda.svg")
